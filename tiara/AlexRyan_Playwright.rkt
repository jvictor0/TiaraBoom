
(define POS-ANOMALOUS-VERB #\G)
(define POS-TRANSITIVE-VERB #\H)
(define POS-INTRANSITIVE-VERB #\I)
(define POS-TRANS-INTRANS-VERB #\J)

(define POS-COUNTABLE-NOUN #\K)
(define POS-UNCOUNTABLE-NOUN #\L)
(define POS-COUNT-UNCOUNT-NOUN #\M)
(define POS-PROPER-NOUN #\N)

(define POS-ADJECTIVE #\O)
(define POS-ADVERB #\P)
(define POS-PRONOUN #\Q)
(define POS-DEFINITE-ARTICLE #\R)
(define POS-INDEFINITE-ARTICLE #\S)
(define POS-PREPOSITION #\T)
(define POS-PREFIX #\U)
(define POS-CONJUNCTION #\V)
(define POS-INTERJECTION #\W)
(define POS-PARTICLE #\X)
(define POS-ABBREVIATION #\Y)
(define POS-NOT-CLASSIFIED #\Z)

(define POS-FIRST POS-ANOMALOUS-VERB)
(define POS-LAST POS-NOT-CLASSIFIED)
(define VERB-INFINITIVE #\t)
(define VERB-CONJUGATED #\f)

(define CONJ-3RD-SING #\a)
(define CONJ-PRESENT-PART #\b)
(define CONJ-PAST #\c)
(define CONJ-PAST-PART #\d)
(define CONJ-UNKNOWN #\e)

(define CONJ-CONTRACT-PRONOUN #\f)
(define CONJ-CONTRACT-NOT #\g)
(define CONJ-OTHER-CONTRACTION #\h)


(define NOUN-SINGULAR #\t)
(define NOUN-PLURAL #\f)

(define PROPER-NOUN-FORENAME #\l)
(define PROPER-NOUN-REGION #\m)
(define PROPER-NOUN-CITY #\n)
(define PROPER-NOUN-OTHER #\o)


(define ADJECTIVE-PREDICATE #\p)
(define ADJECTIVE-ATTRIBUTE #\q)
(define ADJECTIVE-COMPARE #\r)
(define ADJECTIVE-SUPERLATIVE #\s)
(define ADJECTIVE-HYPHEN #\t)

(define ADJECTIVE-OTHER #\f)
(define ADJECTIVE-GOOD #\t)

(define ADVERB-NORMAL #\u)
(define ADVERB-CONJUNCTIVE #\^)
(define ADVERB-INTERROGATIVE #\v)
(define ADVERB-RELATIVE #\w)
(define ADVERB-PARTICLE #\+)

(define CONJUNCTION-COORDINATING #\~)
(define CONJUNCTION-SUBORDINATING #\^)
(define CONJUNCTION-OTHER #\-)

(define PRONOUN-NORMAL #\x)
(define PRONOUN-INTERROGATIVE #\y)
(define PRONOUN-RELATIVE #\z)
(define PRONOUN-POSSESSIVE #\A)


(define %blank (word-punc ""))
(define %nil "")
(define (%nil-func0) %nil)
(define (%nil-func2 x y) %nil)

(define %period (word-punc "."))
(define %dotdotdot (word-punc "..."))
(define %exclamation (word-punc "!"))
(define %semicolon (word-punc ";"))

(define %and (word-make "and" "&nd" "V~*" "1"))
(define %or (word-make "or" "&nd" "V~*" "1"))
(define %that (word-make "that" "D&t" "Pu%,Qx%,Qz*,V^*" "1"))
(define %which (word-make "which" "wItS" "OA*,Qy*,Qz*" "1"))
(define %not (word-make "not" "n0t" "Pu*" "1"))

(define %I (word-make "I" "@" "S-*" "1"))
(define %we (word-make "we" "@" "S-*" "1"))

(define %a (word-make "a" "@" "S-*" "1"))
(define %an (word-make "an" "@n" "S-*" "1"))
(define %the (word-make "the" "D@" "Pu$,R-*" "1"))
(define %than (word-make "than" "D@" "Pu$,R-*" "1"))
(define %some (word-make "some" "" "Pu$,R-*" "1"))
(define %those (word-make "those" "" "Pu$,R-*" "1"))



(define %would (word-make "would" "wUd" "Gc*,Hc%" "1"))
(define %wouldnt (word-make "wouldn't" "wUd" "Gc*,Hc%" "1"))
(define %will (word-make "will" "wIl" "G5*,J0%,M6%" "1"))
(define %should (word-make "should" "SUd" "G5*" "1"))
(define %may (word-make "may" "meI" "G5*,Ga*" "1"))
(define %might (word-make "might" "maIt" "Gc*,L@%" "1"))
(define %could (word-make "could" "kUd" "Gc*" "1"))
(define %must (word-make "must" "mVst" "G5*,M6%" "1"))

(define %am (word-make "am" "&m" "Ge*,Ie%" "1"))
(define %is (word-make "is" "Iz" "Ga*,Ia%" "1"))
(define %isnt (word-make "isn't" "Iz" "Ga*,Ia%" "1"))
(define %arent (word-make "aren't" "Iz" "Ga*,Ia%" "1"))
(define %like (word-make "like" "Iz" "Ga*,Ia%" "1"))
(define %are (word-make "are" "AR" "Ge*,Ie*,K6$" "1"))
(define %was (word-make "was" "w0z" "Gc*,Ic%" "1"))
(define %wasnt (word-make "wasn't" "w0z" "Gc*,Ic%" "1"))
(define %were (word-make "were" "w3R" "Gc*,Ic%" "1"))
(define %werent (word-make "weren't" "w3R" "Gc*,Ic%" "1"))
(define %to (word-make "to" "w3R" "Gc*,Ic%" "1"))


(define %be (word-make "be" "bi" "G5*,I5%" "1"))
(define %been (word-make "been" "bin" "Gd*,Id%" "1"))

(define %has (word-make "has" "h&z" "Ga*,Ja*" "1"))
(define %have (word-make "have" "h&v" "G5*,J5*" "1"))
(define %had (word-make "had" "h&d" "Gc*,Gd*,Jc*,Jd*" "1"))

(define %one (word-make "one" "" "" "1"))
(define %two (word-make "two" "" "" "1"))
(define %three (word-make "three" "" "" "1"))
(define %four (word-make "four" "" "" "1"))
(define %five (word-make "five" "" "" "1"))
(define %six (word-make "six" "" "" "1"))


(define (%adverb-punc begin end)
  (if (eq? %nil begin)
      (phrase (rand-word POS-ADVERB ADVERB-NORMAL) end)
      (rand-word POS-ADVERB ADVERB-NORMAL)))

(define (%sub-clause-punc begin end) (phrase begin (%sub-clause) end))
(define-rand-elem (%possible-sub-clause-func) `((,%sub-clause-punc 1) (,%nil-func2 12)))
(define (%possible-sub-clause begin end) ((%possible-sub-clause-func) begin end))

(define-rand-elem (%possible-adverb-func) `((,%adverb-punc 1) (,%nil-func2 3)))
(define (%possible-adverb begin end) ((%possible-adverb-func) begin end))

(define-rand-func (%sub-clause-start) '(((lambda () (%subordinating-conjunction)) 1)))
(define (%sub-clause) (phrase (%sub-clause-start) (%indep-clause)))

(define-rand-elem (rand-plural) '((#t 1) (#f 2)))
(define (%indep-clause) (%indep-clause-pl (rand-plural)))
(define (%subjunctive-clause) (%subjunctive-clause-pl (rand-plural)))
(define (%conditional-clause) (%conditional-clause-pl (rand-plural)))
(define-rand-elem (%indep-clause-pl-random) 
  `(
    (,%indep-clause-pl-intrans-2 3) 
    (,%indep-clause-pl-intrans-3 2) 
    (,%indep-clause-pl-trans-2 6)
    (,%indep-clause-pl-trans-3 3)

    (,%indep-clause-pl-intrans-ego-2 5) 
    (,%indep-clause-pl-intrans-ego-3 2) 
    (,%indep-clause-pl-trans-ego-2 6)
    (,%indep-clause-pl-trans-ego-3 3)
    
    (,%being-clause 7)
    ))

(define-rand-func (%command) 
  `(
    ((lambda () (phrase (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE) (%possible-adverb %nil %nil))) 1)
    ((lambda () (phrase (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (%object (rand-plural) ''you) (%possible-adverb %nil %nil))) 1)
    ((lambda () (phrase (%possible-adverb %nil %nil) (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (%object (rand-plural) ''you))) 1)
    ((lambda () (phrase %be (%being-target #f ''you))) 2)
    ))



(define (%present-question)
  (let ((sub-and-tag (%subject-and-tag (rand-plural))))
    (phrase (%present-question-word (cdr sub-and-tag)) (car sub-and-tag) (%present-question-suffix (cdr sub-and-tag)) %question)))

(define (%transitive-question)
  (let ((sub-and-tag (%subject-and-tag (rand-plural))))
    (phrase (%transitive-question-word) (rand-word POS-COUNTABLE-NOUN NOUN-SINGULAR)
	    (%simple-question-word (cdr sub-and-tag)) (car sub-and-tag)
	    (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE)
	    (%likely-prepositional-phrase)
	    (%transitive-question-suffix) %question)))

(define-rand-func (%possible-advice-sub-clause)
  `(((lambda () %nil) 7)
    ((lambda () 
       (phrase  (%subordinating-conjunction) (%indep-clause))) 5)
    ((lambda () 
       (phrase  (%coordinating-conjunction-advice) (%command))) 5)
    ((lambda () 
       (phrase %comma (%negatory-conjunction) (%being-clause-conditional (rand-plural)))) 5)))

      

(define-rand-func (%being-question-suffix pl pron)
  `(((lambda () %nil) 20)
    ((lambda () (lit-phrase "or am I crazy")) 1)
    ((lambda () (lit-phrase "or am I dumb")) 1)
    ((lambda () (lit-phrase "or am I on crack")) 1)
    ((lambda () (lit-phrase "or am I on wrong")) 1)
    ((lambda () (phrase (lit-phrase "or am I ") (%being-target #f ''I))) 5)
    ((lambda () (phrase (lit-phrase "or are you ") (%being-target #f ''you))) 5)
    ((lambda () (phrase %or (%being-target ,pl ',pron))) 5)
    ((lambda () (phrase (lit-phrase "or just") (%being-target ,pl ',pron))) 5)))
    

(define-rand-func (%being-question-past-suffix pl pron)
  `(((lambda () %nil) 40)
    ((lambda () (lit-phrase "or am I crazy")) 1)
    ((lambda () (lit-phrase "or am I dumb")) 1)
    ((lambda () (lit-phrase "or am I on crack")) 1)
    ((lambda () (lit-phrase "or am I on wrong")) 1)
    ((lambda () (phrase (lit-phrase "or am I ") (%being-target #f ''I))) 10)
    ((lambda () (phrase (lit-phrase "or are you ") (%being-target #f ''you))) 10)
    ((lambda () (lit-phrase "yesterday")) 1)
    ((lambda () (lit-phrase "just yesterday")) 1)
    ((lambda () (lit-phrase "since yesterday")) 1)
    ((lambda () (lit-phrase "last weak")) 1)
    ((lambda () (lit-phrase "just last weak")) 1)
    ((lambda () (lit-phrase "last year")) 1)
    ((lambda () (lit-phrase "just last year")) 1)
    ((lambda () (lit-phrase "last Tuesday")) 1)
    ((lambda () (lit-phrase "since Sunday")) 1)
    ((lambda () (lit-phrase "just last Friday")) 1)
    ((lambda () (phrase %or (%being-target ,pl ',pron))) 10)
    ((lambda () (phrase (lit-phrase "or just") (%being-target ,pl ',pron))) 10)
    ((lambda () (%being-question-smart-suffix ,pl ',pron)) 10)))

(define (%being-question-smart-suffix pl pron)
  (let* ((plurality (rand-plural))
	 (subj-and-tag (%subject-and-tag plurality)))
    (phrase %or (%to-be+ (cdr subj-and-tag)) (car subj-and-tag)  (%being-target plurality (cdr subj-and-tag)))))

(define (%being-question)
  (let* ((plurality (rand-plural))
         (subj-and-tag (%subject-and-tag plurality)))
    (phrase (%fix-am-not (%to-be (cdr subj-and-tag))) (car subj-and-tag)  (%being-target plurality (cdr subj-and-tag))
	    (%being-question-suffix plurality (cdr subj-and-tag)) %question)))

(define (%being-question-alt)
  (let* ((plurality (rand-plural))
         (subj-and-tag (%subject-and-tag plurality))
	 (target (%being-target plurality (cdr subj-and-tag))))
    (phrase (%fix-am-not (%to-be+ (cdr subj-and-tag))) (car subj-and-tag)  target
	    %or (%fix-am-not (%to-be+ (cdr subj-and-tag))) (car subj-and-tag) target  %question)))


(define (%being-question-past)
  (let* ((plurality (rand-plural))
         (subj-and-tag (%subject-and-tag plurality)))
    (phrase (%fix-am-not (%to-be-past (cdr subj-and-tag))) (car subj-and-tag)  (%being-target plurality (cdr subj-and-tag))
	    (%being-question-past-suffix plurality (cdr subj-and-tag)) %question)))


(define (%fix-am-not p)
  (if (equal? p (lit-phrase "am not"))
      (lit-phrase "aren't")
      p))

(define-rand-func (%present-question-word pronoun)
  `(((lambda () (lit-phrase "did")) 1)
    ((lambda () (lit-phrase "when did")) 1)
    ((lambda () (lit-phrase "where did")) 1)
    ((lambda () (lit-phrase "why did")) 1)
    ((lambda () (lit-phrase "how did")) 1)
    ((lambda () (lit-phrase "didn't")) 1)
    ((lambda () (lit-phrase "why didn't")) 1)
    ((lambda () (lit-phrase "why can't")) 1)
    ((lambda () (lit-phrase "can't")) 1)
    ((lambda () (lit-phrase "can")) 1)  
    ((lambda () (lit-phrase "how can")) 1)  
    ((lambda () (lit-phrase "where can")) 1)  
    ((lambda () (lit-phrase "when can")) 1)  
    ((lambda () (%do-verb ',pronoun)) 2)
    ((lambda () (phrase (lit-phrase "why") (%do-verb ',pronoun))) 1)
    ((lambda () (phrase (lit-phrase "where") (%do-verb+ ',pronoun))) 1)
    ((lambda () (phrase (lit-phrase "how") (%do-verb+ ',pronoun))) 1)
    ((lambda () (phrase (lit-phrase "when") (%do-verb+ ',pronoun))) 1)
    ))
(define-rand-func (%simple-question-word pronoun)
  `(((lambda () (lit-phrase "did")) 1)
    ((lambda () (lit-phrase "didn't")) 1)
    ((lambda () (lit-phrase "can't")) 1)
    ((lambda () (lit-phrase "can")) 1)  
    ((lambda () (%do-verb ',pronoun)) 2)
    ))
(define-rand-func (%transitive-question-word)
  `(((lambda () (lit-phrase "which")) 1)
    ((lambda () (lit-phrase "whose")) 1)
    ((lambda () (lit-phrase "what")) 1)
    ))

(define-rand-func (%do-verb pronoun)
  `(((lambda () (%do-verb+ ',pronoun)) 4)
    ((lambda () (%do-verb- ',pronoun)) 1)))
(define (%do-verb+ pronoun)
   (cond 
    ((equal? pronoun ''I) (lit-phrase "do"))
    ((equal? pronoun ''you) (lit-phrase "do"))
    ((equal? pronoun ''he) (lit-phrase "does"))
    ((equal? pronoun ''she) (lit-phrase "does"))
    ((equal? pronoun ''it) (lit-phrase "does"))
    ((equal? pronoun ''they) (lit-phrase "do"))
    ((equal? pronoun ''we) (lit-phrase "do"))
    ((equal? pronoun ''sing) (lit-phrase "does"))
    ((equal? pronoun ''plural) (lit-phrase "do"))))
(define (%do-verb- pronoun)
  (cond 
   ((equal? pronoun ''I) (lit-phrase "don't"))
   ((equal? pronoun ''you) (lit-phrase "don't"))
   ((equal? pronoun ''he) (lit-phrase "doesn't"))
   ((equal? pronoun ''she) (lit-phrase "doesn't"))
   ((equal? pronoun ''it) (lit-phrase "doesn't"))
   ((equal? pronoun ''they) (lit-phrase "don't"))
   ((equal? pronoun ''we) (lit-phrase "don't"))
   ((equal? pronoun ''sing) (lit-phrase "doesn't"))
   ((equal? pronoun ''plural) (lit-phrase "don't"))))

(define-rand-func (%present-question-suffix pronoun) 
  `(
    ((lambda () (phrase (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE) (%possible-adverb %nil %nil))) 1)
    ((lambda () (phrase (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (%object (rand-plural) ',pronoun) (%possible-adverb %nil %nil))) 1)
    ((lambda () (phrase (%possible-adverb %nil %nil) (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (%object (rand-plural) ',pronoun))) 1)
    ))


(define-rand-elem (%subjunctive-clause-pl-random) 
  `(
    (,%subjunctive-clause-pl-intrans 5) 
    (,%subjunctive-clause-pl-trans 8)
    (,%subjunctive-clause-pl-infin-intrans 5) 
    (,%subjunctive-clause-pl-infin-trans 8)

    (,%being-clause-subjunctive 3)
    ))
(define-rand-elem (%conditional-clause-pl-random) 
  `(
    (,%conditional-clause-pl-intrans 5) 
    (,%conditional-clause-pl-trans 8)
    (,%conditional-clause-pl-infin-intrans 5) 
    (,%conditional-clause-pl-infin-trans 8)

    (,%being-clause-conditional 3)
    ))


(define (%indep-clause-pl plural?) ((%indep-clause-pl-random) plural?))
(define (%subjunctive-clause-pl plural?) ((%subjunctive-clause-pl-random) plural?))
(define (%conditional-clause-pl plural?) ((%conditional-clause-pl-random) plural?))

(define (%conditional-helper)
  (phrase (%would-or-wouldnt) (%possible-conditional-filler)))

(define-rand-elem (%would-or-wouldnt)
  `((,%would 8)
    (,%wouldnt 2)
    (,(lit-phrase "would never") 1)
    (,(lit-phrase "would maybe") 2)
    (,(lit-phrase "would perhaps") 1)
    (,(lit-phrase "would always") 1)
    (,(lit-phrase "would almost surely") 1)
    (,(lit-phrase "would almost always") 1)
    (,(lit-phrase "would at least sometimes") 1)
    (,(lit-phrase "would at least occasionally") 1)))
(define-rand-elem (%possible-conditional-filler)
  `((,%nil 15)
    (,(lit-phrase "be able to") 2)
    (,(lit-phrase "have enough to") 1)
    (,(lit-phrase "have what it takes to") 1)
    (,(lit-phrase "want to") 2)
    (,(lit-phrase "refuse to") 1)
    (,(lit-phrase "need to") 2)
    (,(lit-phrase "have to") 1)
    (,(lit-phrase "get to") 1)
    (,(lit-phrase "try to") 1)
    (,(lit-phrase "think I could") 1)
    (,(lit-phrase "think I should") 1)))

(define (%indep-clause-pl-trans-no-obj plural? no-adverb) 
  (phrase (%noun plural? #f) 
	  (fix-helper is-helper (if no-adverb (%possible-adverb %nil %nil) %nil)
		      ((%verb plural?) POS-TRANSITIVE-VERB))))

(define (%indep-clause-pl-intrans-1 plural?)
  (phrase (%possible-adverb %nil %nil) (%noun plural? #f)  ((%verb plural?) POS-INTRANSITIVE-VERB) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-intrans-2 plural?)
  (phrase  (%noun plural? #f) (fix-helper is-helper (%possible-adverb %nil %nil) ((%verb plural?) POS-INTRANSITIVE-VERB)) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-intrans-3 plural?)
  (phrase (%noun plural? #f) ((%verb plural?) POS-INTRANSITIVE-VERB) (%possible-adverb %nil %nil) (%possible-prepositional-phrase)))

(define (%subjunctive-clause-pl-intrans plural?)
  (phrase (%subject plural?) %were (%possible-adverb %nil %nil) 
	  (rand-word POS-INTRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)
	  (%possible-prepositional-phrase)))
(define (%subjunctive-clause-pl-infin-intrans plural?)
  (phrase (%subject plural?) %were %to (%possible-adverb %nil %nil) 
	  (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE)
	  (%possible-prepositional-phrase)))

(define (%conditional-clause-pl-intrans plural?)
  (phrase (%subject plural?) (%conditional-helper) %be (%possible-adverb %nil %nil) 
	  (rand-word POS-INTRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)
	  (%possible-prepositional-phrase)))
(define (%conditional-clause-pl-infin-intrans plural?)
  (phrase (%subject plural?) (%conditional-helper) (%possible-adverb %nil %nil) 
	  (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE)
	  (%possible-prepositional-phrase)))



(define (%indep-clause-pl-intrans-ego-1 plural?)
  (phrase (%possible-adverb %nil %nil) (if plural? %we %I)
	  ((%verb-ego plural?) POS-INTRANSITIVE-VERB) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-intrans-ego-2 plural?)
  (phrase  (if plural? %we %I) (fix-helper is-helper (%possible-adverb %nil %nil) ((%verb-ego plural?) POS-INTRANSITIVE-VERB)) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-intrans-ego-3 plural?)
  (phrase (if plural? %we %I) ((%verb-ego plural?) POS-INTRANSITIVE-VERB) (%possible-adverb %nil %nil) (%possible-prepositional-phrase)))


(define (%indep-clause-pl-trans-1 plural?)
  (phrase (%possible-adverb %nil %nil) (%indep-clause-pl-trans-no-obj plural? #t) 
          (%object (rand-plural) #f) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-trans-2 plural?)
  (phrase (%indep-clause-pl-trans-no-obj plural? #f) 
          (%object (rand-plural) #f) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-trans-3 plural?)
  (phrase (%indep-clause-pl-trans-no-obj plural? #t) 
          (%object (rand-plural) #f) (%possible-adverb %nil %nil) (%possible-prepositional-phrase)))

(define (%subjunctive-clause-pl-trans plural?)
  (let ((subj-and-tag (%subject-and-tag plural?)))
    (phrase (car subj-and-tag) %were (%possible-adverb %nil %nil) 
	    (rand-word POS-TRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)
	    (%object (rand-plural) (cdr subj-and-tag)) (%possible-prepositional-phrase))))
(define (%subjunctive-clause-pl-infin-trans plural?)
  (let ((subj-and-tag (%subject-and-tag plural?)))
    (phrase (car subj-and-tag) %were %to (%possible-adverb %nil %nil) 
	    (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE)
	    (%object (rand-plural) (cdr subj-and-tag)) (%possible-prepositional-phrase))))


(define (%conditional-clause-pl-trans plural?)
  (let ((subj-and-tag (%subject-and-tag plural?)))
    (phrase (car subj-and-tag) (%conditional-helper) %be (%possible-adverb %nil %nil) 
	    (rand-word POS-TRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)
	    (%object (rand-plural) (cdr subj-and-tag)) (%possible-prepositional-phrase))))
(define (%conditional-clause-pl-infin-trans plural?)
  (let ((subj-and-tag (%subject-and-tag plural?)))
    (phrase (car subj-and-tag) (%conditional-helper) (%possible-adverb %nil %nil) 
	    (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE)
	    (%object (rand-plural) (cdr subj-and-tag)) (%possible-prepositional-phrase))))

  

(define (%indep-clause-pl-trans-ego-1 plural?)
  (phrase (%possible-adverb %nil %nil) (if plural? %we %I)  ((%verb-ego plural?) POS-TRANSITIVE-VERB)
          (%object (rand-plural) (if plural? ''we ''I)) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-trans-ego-2 plural?)
  (phrase (if plural? %we %I)  (fix-helper is-helper (%possible-adverb %nil %nil) ((%verb-ego plural?) POS-TRANSITIVE-VERB))
          (%object (rand-plural) (if plural? ''we ''I)) (%possible-prepositional-phrase)))
(define (%indep-clause-pl-trans-ego-3 plural?)
  (phrase (if plural? %we %I) ((%verb-ego plural?) POS-TRANSITIVE-VERB)
          (%object (rand-plural) (if plural? ''we ''I)) (%possible-adverb %nil %nil) (%possible-prepositional-phrase)))


(define (%being-clause plurality)
  (let ((subj-and-tag (%subject-and-tag plurality)))
    (phrase (car subj-and-tag) (%to-be (cdr subj-and-tag)) (%being-target plurality (cdr subj-and-tag)))))
(define (%being-clause-subjunctive plurality)
  (let ((subj-and-tag (%subject-and-tag plurality)))
    (phrase (car subj-and-tag) %were (%being-target plurality (cdr subj-and-tag)))))
(define (%being-clause-conditional plurality)
  (let ((subj-and-tag (%subject-and-tag plurality)))
    (phrase (car subj-and-tag) (%conditional-helper) %be (%being-target plurality (cdr subj-and-tag)))))



(define-rand-func (%to-be tag) 
  `(((lambda () (%to-be+ ',tag)) 3)
    ((lambda () (%to-be- ',tag)) 1)))
(define (%to-be+ tag)
  (cond ((equal? tag ''I) %am)
	((equal? tag ''sing) %is)
	((equal? tag ''he) %is)
	((equal? tag ''she) %is)
	((equal? tag ''it) %is)
	((equal? tag ''plural) %are)
	((equal? tag ''you) %are)
	((equal? tag ''they) %are)
	((equal? tag ''we) %are)))
(define (%to-be- tag)
  (cond ((equal? tag ''I) (lit-phrase "am not"))
	((equal? tag ''sing) %isnt)
	((equal? tag ''he) %isnt)
	((equal? tag ''she) %isnt)
	((equal? tag ''it) %isnt)
	((equal? tag ''plural) %arent)
	((equal? tag ''you) %arent)
	((equal? tag ''they) %arent)
	((equal? tag ''we) %arent)))

(define-rand-func (%to-be-past tag) 
  `(((lambda () (%to-be-past+ ',tag)) 3)
    ((lambda () (%to-be-past- ',tag)) 1)))
(define (%to-be-past+ tag)
  (cond ((equal? tag ''I) %was)
	((equal? tag ''sing) %was)
	((equal? tag ''he) %was)
	((equal? tag ''she) %was)
	((equal? tag ''it) %was)
	((equal? tag ''plural) %were)
	((equal? tag ''you) %were)
	((equal? tag ''they) %were)
	((equal? tag ''we) %were)))
(define (%to-be-past- tag)
  (cond ((equal? tag ''I) %wasnt)
	((equal? tag ''sing) %wasnt)
	((equal? tag ''he) %wasnt)
	((equal? tag ''she) %wasnt)
	((equal? tag ''it) %wasnt)
	((equal? tag ''plural) %wasnt)
	((equal? tag ''you) %werent)
	((equal? tag ''they) %werent)
	((equal? tag ''we) %werent)))



(define (%me-object pronoun plurality)
  (cond 
   ((equal? ,pronoun 'I) (lit-phrase "myself"))
   ((equal? ,pronoun 'we) (lit-phrase "ourselves"))
   (else (if ,plurality (lit-phrase "us") (lit-phrase "me")))))

(define (%you-object pronoun plurality)
  (cond 
   ((equal? ,pronoun 'you) (lit-phrase "yourself"))
   (else (if ,plurality (%being-target ,plurality ',pronoun) (lit-phrase "you")))))


(define-rand-func (%being-target plurality pronoun)
 `(((lambda () (rand-word POS-PROPER-NOUN PROPER-NOUN-FORENAME)) 2)
   ((lambda () (%me-object ,pronoun ,plurality)) 1)
   ((lambda () (%you-object ,pronoun ,plurality)) 1)
   ((lambda () (phrase (%article-indef (not ,plurality)) (%possible-adj) (rand-word POS-COUNTABLE-NOUN (not ,plurality)))) 2)
   ((lambda () (phrase %like (%article-indef (not ,plurality))  (%possible-adj)(rand-word POS-COUNTABLE-NOUN (not ,plurality)))) 2)
   ((lambda () (%prepositional-phrase)) 3)
   ((lambda () (%adj)) 3)
   ((lambda () (phrase (%adj-comparative) %than (%object ,plurality ',pronoun))) 3)
   ((lambda () (phrase (%adj-comparative-1) %than (%object ,plurality ',pronoun) %and 
		       (%adj-comparative-1) %than (%object ,plurality ',pronoun))) 3)
   ((lambda () (phrase %the (%adj-superlative (not ,plurality)))) 3)))

(define (%noun plural simple)
  (if plural
      (%noun-pl simple)
      (%noun-sing simple)))

(define (%verb plural)
  (if (eq? plural #t)
      %verb-pl
      %verb-sing))

(define-rand-elem (%possible-prefix)
  `((,%nil 30) 
    (,(lit-phrase "I think") 2)
    (,(lit-phrase "I'm bothered that") 2)
    (,(lit-phrase "I believe that") 2)
    (,(lit-phrase "I don't think") 2) 
    (,(phrase (lit-phrase "imo") %comma) 1)
    (,(phrase (lit-phrase "hey") %comma) 1)
    (,(phrase (lit-phrase "yo") %comma) 1)	
    (,(phrase (lit-phrase "imho") %comma) 1)
    (,(lit-phrase "I heard") 2)
    (,(lit-phrase "they say") 2)
    (,(lit-phrase "no offense but") 2)
    (,(phrase (lit-phrase "honestly") %comma) 2)
    (,(phrase (lit-phrase "you know what") %comma) 2)
    (,(phrase (lit-phrase "however") %comma) 2)
    (,(lit-phrase "but") 2)
    (,(lit-phrase "I hate that") 2)
    (,(lit-phrase "I love that") 2)
    (,(phrase (lit-phrase "eww") %comma) 1)
    ))

(define-rand-elem (%second-conditional-prefix)
  `((,(lit-phrase "if") 5)
    (,(lit-phrase "if only") 1)))

(define-rand-elem (%transitive-question-suffix)
  `((,%nil 8)
    (,(lit-phrase "and why") 1)
    (,(lit-phrase "and what for") 1)
    (,(lit-phrase "and for what") 1)
    (,(phrase %comma (lit-phrase "seriously")) 1)
    (,(phrase %comma (lit-phrase "really")) 1)))

  
(define-rand-elem (%subjunctive-prefix)
  `((,(lit-phrase "but what if") 2)
    (,(lit-phrase "imagine if") 2)    
    (,(lit-phrase "but imagine if") 2)    
    (,(lit-phrase "what would happen if") 2)))


(define-rand-elem (%possible-suffix)
  `((,%nil 25) 
    (,(phrase %comma (lit-phrase "you know")) 1)
    (,(phrase %comma (lit-phrase "but I don't know why")) 1)
    (,(phrase %comma (lit-phrase "at least I think")) 1)
    (,(phrase %comma (lit-phrase "and I'm excited about it")) 1)
    (,(phrase %comma (lit-phrase "and I'm stoked")) 1)
    (,(phrase %comma (lit-phrase "and I don't care")) 1)
    (,(phrase %comma (lit-phrase "but don't take my word for it")) 1)
    (,(phrase %dotdotdot (lit-phrase "nevermind")) 1)
    ))


(define-rand-elem (%question-adapted-prefix)
  `((,(lit-phrase "do you think") 1)
    (,(lit-phrase "do you believe") 1)
    (,(lit-phrase "did you know") 1)
    (,(lit-phrase "did you hear") 1)
    (,(lit-phrase "are you saying that") 1)
    (,(lit-phrase "why do you think") 1)
    (,(lit-phrase "do you know if") 1)
    (,(lit-phrase "don't you hate that") 1)
    (,(lit-phrase "don't you love that") 1)
    (,(lit-phrase "what if") 1)
    ))
  
(define-rand-elem (%advice-prefix)
  `((,(lit-phrase "I think you should") 1)
    (,(lit-phrase "you should") 1)
    (,(lit-phrase "you ought to") 1)
    (,(lit-phrase "you ought not") 1)
    (,(lit-phrase "you shouldn't") 1)
    (,(lit-phrase "perhaps you should") 1)
    (,(lit-phrase "perhaps you ought to") 1)
    (,(lit-phrase "perhaps you shouldn't") 1)
    (,(lit-phrase "please") 2)
    (,(lit-phrase "please don't") 1)
    (,(lit-phrase "you need to") 1)
    (,(lit-phrase "you gotta") 1)
    (,(lit-phrase "perhaps you need to") 1)
    (,(lit-phrase "perhaps you gotta") 1)
    (,(lit-phrase "you don't have to") 1)
    (,(lit-phrase "I have to ask you to") 1)
    ))
  

(define-rand-func (%sentence) 
  `(((lambda () (phrase (%possible-prefix) (%sentence-random) (%end-punc-random))) 3)
    ((lambda () (phrase (%sentence-random) (%possible-suffix) (%end-punc-random))) 2)
    ((lambda () (phrase (%second-conditional-prefix) (%subjunctive-clause) %comma (%conditional-clause) (%end-punc-random))) 3)
    ((lambda () (phrase (%conditional-clause) (%second-conditional-prefix) (%subjunctive-clause) (%end-punc-random))) 3)
    ((lambda () (phrase (%subjunctive-prefix) (%subjunctive-clause) %question)) 2)
    (,%advice 2)
    (,%question-sentence 3))) 
 
(define-rand-func (%sentence-bother) 
  `(((lambda () (phrase (%possible-prefix) (%sentence-random) (%end-punc-random))) 3)
    ((lambda () (phrase (%sentence-random) (%possible-suffix) (%end-punc-random))) 2)
    ((lambda () (phrase (%second-conditional-prefix) (%subjunctive-clause) %comma (%conditional-clause) (%end-punc-random))) 3)
    ((lambda () (phrase (%conditional-clause) (%second-conditional-prefix) (%subjunctive-clause) (%end-punc-random))) 3)
    ((lambda () (phrase (%subjunctive-prefix) (%subjunctive-clause) %question)) 2)
    (,%advice 12)
    (,%question-sentence 18)))  

(define-rand-elem (%end-punc-random) `((,%exclamation 1) (,%period 9)))                            
(define-rand-func (%sentence-random) '((%sentence-single 5) (%sentence-compound 2)))
(define (%sentence-single) (phrase  (%possible-sub-clause %comma %comma) (%indep-clause) (%possible-sub-clause %comma %nil) %comma))
(define (%sentence-compound-conjunction) (phrase (%sentence-single) (%coordinating-conjunction) (%sentence-single)))
(define (%sentence-compound-adverb) (phrase (%sentence-single) %semicolon (rand-word POS-ADVERB ADVERB-CONJUNCTIVE) %comma (%sentence-single)))
(define-rand-func (%sentence-compound) '((%sentence-compound-conjunction 5) (%sentence-compound-adverb 1)))
(define (%advice) (phrase (%advice-prefix) (%command) (%possible-advice-sub-clause) (%end-punc-random)))
(define-rand-elem (%question-sentence)
  `((,(%present-question) 2)
    (,(%transitive-question) 1)
    (,(%being-question) 1)
    (,(%being-question-past) 1)
    (,(%being-question-alt) 1)))


(define (%prepositional-phrase) (phrase (%preposition-sing) (%noun-phrase-no-clause (rand-plural))))
(define-rand-func (%possible-prepositional-phrase) '((%prepositional-phrase 1)(%nil-func0 6)))
(define-rand-func (%likely-prepositional-phrase) '((%prepositional-phrase 1)(%nil-func0 1)))

(define-rand-elem (%preposition-sing)
  `((,(lit-phrase "across from") 1)
    (,(lit-phrase "around") 1)
    (,(lit-phrase "beyond") 1)
    (,(lit-phrase "by") 1)
    (,(lit-phrase "for") 2)
    (,(lit-phrase "like") 3)
    (,(lit-phrase "near") 1)
    (,(lit-phrase "with") 1)
    (,(lit-phrase "without") 1)))



(define (%article plurality)
  (if plurality (%article-sing) (%article-pl)))
(define (%article-indef plurality)
  (if plurality (%article-sing-indef) (%article-pl-indef)))
(define-rand-elem (%article-pl) `((,%the 10) (,%some 4) (,%those 16) (,%two 1) (,%three 1) (,%four 1) (,%five 1) (,%six 1)
				  (,(lit-phrase "my") 8)
				  (,(lit-phrase "your") 8)
				  (,(lit-phrase "his") 3)
				  (,(lit-phrase "her") 3)
				  (,(lit-phrase "their") 4)))
(define-rand-elem (%article-sing) `((,%the 4) (,%a 3) (,%that 6) (,%some 1) (,(lit-phrase "this") 3)
				    (,(lit-phrase "my" )7)
				    (,(lit-phrase "your" )7)
				    (,(lit-phrase "his" )2)
				    (,(lit-phrase "her" )2)
				    (,(lit-phrase "their" )4)))
(define-rand-elem (%article-pl-indef) `((,%some 4) (,%those 16) (,%two 1) (,%three 1) (,%four 1) (,%five 1) (,%six 1)
					(,(lit-phrase "my" )7)
					(,(lit-phrase "your" )7)
					(,(lit-phrase "his" )2)
					(,(lit-phrase "her" )2)
					(,(lit-phrase "their" )2)))
(define-rand-elem (%article-sing-indef) `((,%a 8) (,%some 1)
					  (,(lit-phrase "my" )6)
					  (,(lit-phrase "your") 6)
					  (,(lit-phrase "his" )2)
					  (,(lit-phrase "her" )2)
					  (,(lit-phrase "their" )3)))
					  



(define-rand-elem (%coordinating-conjunction)
  `((,(lit-phrase "and") 1)
    (,(lit-phrase "or") 1)
    (,(lit-phrase "but") 1)
    (,(lit-phrase "yet") 1)
    (,(lit-phrase "for" ) 1)
    (,(lit-phrase "so") 1)))

(define-rand-elem (%coordinating-conjunction-advice)
  `((,(lit-phrase "and") 1)
    (,(lit-phrase "and try to") 1)
    (,(lit-phrase "and you will") 1)
    (,(lit-phrase "and don't") 1)
    (,(lit-phrase "or") 1)
    (,(lit-phrase "or you won't be able to") 1)
    (,(lit-phrase "but") 1)
    (,(lit-phrase "but don't") 1)
    (,(lit-phrase "but try to") 1)
    (,(lit-phrase "yet") 1)
    (,(lit-phrase "so you can") 1)))


(define-rand-elem (%subordinating-conjunction)
  `((,(lit-phrase "after") 1)
    (,(lit-phrase "till") 1)
    (,(lit-phrase "if" ) 1)
    (,(lit-phrase "unless") 1)
    (,(lit-phrase "inasmuch as") 1)   
    (,(lit-phrase "until") 1)
    (,(lit-phrase "as if" ) 1)
    (,(lit-phrase "in order that") 1) 
    (,(lit-phrase "when") 1)
    (,(lit-phrase "as long as") 1) 
    (,(lit-phrase "lest" ) 1)
    (,(lit-phrase "whenever") 1)
    (,(lit-phrase "as much as" ) 1)
    (,(lit-phrase "now that" ) 1)
    (,(lit-phrase "where") 1)
    (,(lit-phrase "as soon as") 1) 
    (,(lit-phrase "provided" ) 1)
    (,(lit-phrase "wherever") 1)
    (,(lit-phrase "as though" ) 1)
    (,(lit-phrase "since" ) 1)
    (,(lit-phrase "while") 1)
    (,(lit-phrase "because" ) 1)
    (,(lit-phrase "so that") 1)
    (,(lit-phrase "before" ) 1)
    (,(lit-phrase "even if") 1)
    (,(lit-phrase "even though") 1)))

(define-rand-elem (%negatory-conjunction)
  `((,(lit-phrase "lest" ) 1)
    (,(lit-phrase "provided" ) 1)
    (,(lit-phrase "even if") 1)
    (,(lit-phrase "even though") 1)
    (,(lit-phrase "or else") 1)))


(define-rand-func (%possible-adj) '((%nil-func0 50) (%adj-1 8) (%adj-2 1) (%adj-2-and 1) (%adj-3 1)))
(define-rand-func (%adj) '((%adj-1 8) (%adj-2-and 3) (%adj-3 1)))
(define (%adj-1) (rand-word POS-ADJECTIVE ADJECTIVE-GOOD))
(define (%adj-2) (phrase (rand-word POS-ADJECTIVE ADJECTIVE-GOOD) %comma (rand-word POS-ADJECTIVE ADJECTIVE-GOOD)))
(define (%adj-2-and) (phrase (rand-word POS-ADJECTIVE ADJECTIVE-GOOD) %and (rand-word POS-ADJECTIVE ADJECTIVE-GOOD)))
(define (%adj-3) (phrase (rand-word POS-ADJECTIVE ADJECTIVE-GOOD) %comma (rand-word POS-ADJECTIVE ADJECTIVE-GOOD) %comma %and (rand-word POS-ADJECTIVE ADJECTIVE-GOOD)))
(define (%adj-comparative-1) (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-COMPARE))
(define (%adj-comparative-2) (phrase (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-COMPARE) %and (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-COMPARE)))
(define-rand-func (%adj-comparative) '((%adj-comparative-1 6) (%adj-comparative-2 1)))
(define-rand-func (%adj-superlative plural) 
  `(((lambda () (phrase (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE))) 8)
    ((lambda () (phrase (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE) (%superlative-modify))) 1)
    ((lambda () (phrase (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE) 
			(rand-word POS-COUNTABLE-NOUN ,plural) (%superlative-modify))) 1)
    ((lambda () (phrase (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE))) 2)))

(define-rand-elem (%superlative-modify)
  `((,(lit-phrase "ever") 1)
    (,(lit-phrase "anywhere") 1)
    (,(lit-phrase "yet") 1)
    (,(lit-phrase "I've seen") 1)
    (,(lit-phrase "I've know") 1)
    (,(lit-phrase "I've heard of") 1)))

(define-rand-func (%possible-adj-clause) '((%nil-func0 2) (%adj-clause 3)))
(define-rand-func (%adj-clause) '((%that-adj-clause 3) (%which-adj-clause 1)))
(define (%that-adj-clause) (phrase %that (%indep-clause-pl-trans-no-obj (rand-plural) #f)))
(define (%which-adj-clause) (phrase %which (%indep-clause-pl-trans-no-obj (rand-plural) #f)))

(define-rand-func (%noun-pl simple) 
  `(((lambda () (%noun-phrase NOUN-PLURAL ,simple)) 100) 
    ((lambda () (phrase (%noun-phrase-no-clause NOUN-SINGULAR) %and (%noun-phrase NOUN-SINGULAR ,simple))) 25)
    ((lambda () (phrase (%noun-phrase-no-clause NOUN-SINGULAR) %comma (%noun-phrase-no-clause NOUN-SINGULAR) %comma %and (%noun-phrase NOUN-SINGULAR ,simple))) 1)))

(define (%noun-sing simple) (%noun-phrase NOUN-SINGULAR simple))
(define (%noun-phrase-no-clause plurality) 
  (if (not plurality)
      (%noun-phrase-no-clause-pl)
      (%noun-phrase-no-clause-sing)))
(define-rand-func (%noun-phrase-no-clause-pl)
  `(((lambda () (phrase (%article #f) (%possible-adj) (rand-word POS-COUNTABLE-NOUN #f))) 8)
    ((lambda () (phrase %the (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE) (rand-word POS-COUNTABLE-NOUN #f))) 1)
    ))
(define-rand-func (%noun-phrase-no-clause-sing)
  `(((lambda () (phrase (%article #t) (%possible-adj) (rand-word POS-COUNTABLE-NOUN #t))) 8)
    ((lambda () (phrase %the (rand-word POS-ADJECTIVE ADJECTIVE-OTHER ADJECTIVE-SUPERLATIVE) (rand-word POS-COUNTABLE-NOUN #t))) 1)
    ((lambda () (rand-word POS-PROPER-NOUN PROPER-NOUN-FORENAME)) 2)))
(define (%noun-phrase plurality simple) 
  (if simple
      (%noun-phrase-no-clause plurality)
      (phrase (%noun-phrase-no-clause plurality))))

(define-rand-func (%object-sing is-I)
  `(((lambda () (%noun #f #f)) 20)
    ((lambda () (if (equal? ,is-I 'I) 
		     (lit-phrase "myself") 
		     (if (equal? ,is-I 'we)
			 (%object-sing ''we)
			 (lit-phrase "me")))) 5)
    ((lambda () (if (equal? ,is-I 'he) (lit-phrase "himself") (lit-phrase "him"))) 1)
    ((lambda () (if (equal? ,is-I 'she) (lit-phrase "herself") (lit-phrase "her"))) 1)
    ((lambda () (if (equal? ,is-I 'it) (lit-phrase "itself") (lit-phrase "it"))) 2)
    ((lambda () (if (equal? ,is-I 'you) (lit-phrase "yourself") (lit-phrase "you"))) 2)))

(define-rand-func (%object-pl is-we)
  `(((lambda () (%noun #t #f)) 20)
    ((lambda () (if (equal? ,is-we 'we) (lit-phrase "ourselves") (lit-phrase "us"))) 3)
    ((lambda () (if (equal? ,is-we 'them) (lit-phrase "themselves") (lit-phrase "them"))) 2)
    ((lambda () (lit-phrase "em")) 2)))
(define (%object plurality is-ego)
  (if plurality
      (%object-pl is-ego)
      (%object-sing is-ego)))


(define (%subject-and-tag plurality)
  (if plurality
      (%subj-and-tag-pl)
      (%subj-and-tag-sing)))

(define-rand-func (%subj-and-tag-sing)
  `(((lambda () (cons (%noun #f #f) ''sing)) 10)
    ((lambda () (cons (lit-phrase "I") ''I)) 5)
    ((lambda () (cons (lit-phrase "he") ''he)) 1)
    ((lambda () (cons (lit-phrase "she") ''she)) 1)
    ((lambda () (cons (lit-phrase "it") ''it)) 2)
    ((lambda () (cons (lit-phrase "you") ''you)) 10)))
(define-rand-func (%subj-and-tag-pl)
  `(((lambda () (cons (%noun #t #f) ''plural)) 10)
    ((lambda () (cons (lit-phrase "we") ''we)) 5)
    ((lambda () (cons (lit-phrase "they") ''they)) 3)))
(define (%subject plurality) (car (%subject-and-tag plurality)))

  
(define-rand-elem (%verb-pl-func) `((,%verb-simple-present-pl 4) 
                                    (,%verb-simple-past 4) 
                                    (,%verb-simple-future 3) 
                                    (,%verb-present-continuous-pl 3) 
                                    (,%verb-past-continuous-pl 3) 
                                    (,%verb-future-continuous 3)
                                    (,%verb-present-perfect-pl 2)
                                    (,%verb-past-perfect 2)
                                    (,%verb-future-perfect 2)
                                    (,%verb-present-perfect-continuous-pl 1)
                                    (,%verb-past-perfect-continuous 1)
                                    (,%verb-future-perfect-continuous 1)))

(define-rand-elem (%verb-sing-func) `((,%verb-simple-present-sing 4) 
                                      (,%verb-simple-past 4) 
                                      (,%verb-simple-future 3) 
                                      (,%verb-present-continuous-sing 3) 
                                      (,%verb-past-continuous-sing 3) 
                                      (,%verb-future-continuous 3)
                                      (,%verb-present-perfect-sing 2)
                                      (,%verb-past-perfect 2)
                                      (,%verb-future-perfect 2)
                                      (,%verb-present-perfect-continuous-sing 1)
                                      (,%verb-past-perfect-continuous 1)
                                      (,%verb-future-perfect-continuous 1)))

(define-rand-elem (%verb-ego-func) `((,%verb-simple-present-ego 4) 
                                      (,%verb-simple-past 4) 
                                      (,%verb-simple-future 3) 
                                      (,%verb-present-continuous-ego 3) 
                                      (,%verb-past-continuous-sing 3) 
                                      (,%verb-future-continuous 3)
                                      (,%verb-present-perfect-ego 2)
                                      (,%verb-past-perfect 2)
                                      (,%verb-future-perfect 2)
                                      (,%verb-present-perfect-continuous-ego 1)
                                      (,%verb-past-perfect-continuous 1)
                                      (,%verb-future-perfect-continuous 1)))

(define-rand-elem (%verb-we-func) `((,%verb-simple-present-ego 4) 
                                      (,%verb-simple-past 4) 
                                      (,%verb-simple-future 3) 
                                      (,%verb-present-continuous-pl 3) 
                                      (,%verb-past-continuous-pl 3) 
                                      (,%verb-future-continuous 3)
                                      (,%verb-present-perfect-ego 2)
                                      (,%verb-past-perfect 2)
                                      (,%verb-future-perfect 2)
                                      (,%verb-present-perfect-continuous-ego 1)
                                      (,%verb-past-perfect-continuous 1)
                                      (,%verb-future-perfect-continuous 1)))


(define (is-helper x)
  (member x (list %not %would %will %should %may %might %could %must
		  %is %are %am %was %were %be %has %have %had %been)))

(define (%verb-pl trans) ((%verb-pl-func) trans))
(define (%verb-sing trans) ((%verb-sing-func) trans))
(define (%verb-ego plural) 
  (if plural (%verb-we-func) (%verb-ego-func)))

(define-rand-func (%random-inflect) `(((lambda () (phrase (%random-modal) %not)) 2) (%random-modal 5)))
(define-rand-elem (%random-modal) `((,%would 3) (,%will 8) (,%should 2) (,%may 1) (,%might 2) (,%could 2) (,%must 2)))
(define (%verb-simple-present-sing trans) (rand-word trans VERB-CONJUGATED CONJ-3RD-SING))
(define (%verb-simple-present-pl trans) (rand-word trans VERB-INFINITIVE))
(define (%verb-simple-present-ego trans) (rand-word trans VERB-INFINITIVE))
(define (%verb-simple-past trans) (rand-word trans VERB-CONJUGATED CONJ-PAST))
(define (%verb-simple-future trans) (phrase (%random-inflect) (rand-word trans VERB-INFINITIVE)))

(define (%verb-present-continuous-sing trans) (phrase %is (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-present-continuous-pl trans) (phrase %are (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-present-continuous-ego trans) (phrase %am (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-past-continuous-sing trans) (phrase %was (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-past-continuous-pl trans) (phrase %were (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-future-continuous trans) (phrase (%random-inflect) %be (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))

(define (%verb-present-perfect-sing trans) (phrase %has (rand-word trans VERB-CONJUGATED CONJ-PAST-PART)))
(define (%verb-present-perfect-pl trans) (phrase %have (rand-word trans VERB-CONJUGATED CONJ-PAST-PART)))
(define (%verb-present-perfect-ego trans) (phrase %have (rand-word trans VERB-CONJUGATED CONJ-PAST-PART)))
(define (%verb-past-perfect trans) (phrase %had (rand-word trans VERB-CONJUGATED CONJ-PAST-PART)))
(define (%verb-future-perfect trans) (phrase (%random-inflect) %have (rand-word trans VERB-CONJUGATED CONJ-PAST-PART)))

(define (%verb-present-perfect-continuous-sing trans) (phrase %has %been (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-present-perfect-continuous-pl trans) (phrase %have %been (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-present-perfect-continuous-ego trans) (phrase %have %been (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-past-perfect-continuous trans) (phrase %had %been (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))
(define (%verb-future-perfect-continuous trans) (phrase (%random-inflect) %have %been (rand-word trans VERB-CONJUGATED CONJ-PRESENT-PART)))

(define-rand-func (%insult-body)
  `(
    (,(lambda () (phrase (%you-are) (%being-target #f ''you))) 4)
    (,(lambda () (phrase (lit-phrase "you")  (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE) %comma %and (%insult-body)))  1)
    (,(lambda () (phrase (%you-are) (lit-phrase "such a") (%possible-adj) (rand-word POS-COUNTABLE-NOUN #t))) 3)
    (,(lambda () (phrase (%you-are) %a  (rand-word POS-TRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)  (%possible-adj) (rand-word POS-COUNTABLE-NOUN #t))) 4)
    (,(lambda () (phrase %I (rand-word POS-TRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART) (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (lit-phrase "you"))) 2)
    (,(lambda () (phrase %I (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (lit-phrase "you"))) 3)
    ))

(define-rand-elem (%you-are)
  `((,(lit-phrase "you are") 1)
    (,(lit-phrase "you're") 1)
    (,(lit-phrase "I heard you're") 1)
    (,(lit-phrase "you know, you're") 1)
   ))    


(define-rand-elem (%I-need)
  `((,(lit-phrase "I need you to") 1)
    (,(lit-phrase "I want you to") 1)
    (,(lit-phrase "I wish that you'd") 1)
    (,(lit-phrase "I hope you") 1)
    (,(lit-phrase "I think you should") 1)
    (,(lit-phrase "please") 1)
    ))  

(define-rand-func (%insult-tail)
  `(
    (,(lambda () %nil) 8)
    (,(lambda () (phrase %comma (lit-phrase "you") (%possible-adj) (rand-word POS-COUNTABLE-NOUN #t))) 1)
    (,(lambda () (phrase %comma (lit-phrase "you") (rand-word POS-TRANSITIVE-VERB VERB-CONJUGATED CONJ-PRESENT-PART)  (%possible-adj) (rand-word POS-COUNTABLE-NOUN #t))) 1)
    (,(lambda () (phrase %comma %and (%I-need) (rand-word POS-INTRANSITIVE-VERB VERB-INFINITIVE))) 1)
    (,(lambda () (phrase %comma %and (%I-need) (rand-word POS-TRANSITIVE-VERB VERB-INFINITIVE) (lit-phrase "yourself"))) 1)
    ))

  
(define (%insult)
  (phrase (%insult-body) (%insult-tail)))

